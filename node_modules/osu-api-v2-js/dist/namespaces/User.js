import { Ruleset } from "../index.js";
export var User;
(function (User) {
    let Kudosu;
    (function (Kudosu) {
        /**
         * Get data about the history of a user's kudosu!
         * @param user The user in question
         * @param config Array limit & offset
         */
        async function getHistory(user, config) {
            const user_id = typeof user === "number" ? user : user.id;
            return await this.request("get", ["users", user_id, "kudosu"], { ...config });
        }
        Kudosu.getHistory = getHistory;
        /** Get the top 50 players who have the most total kudosu! */
        async function getRanking() {
            const response = await this.request("get", ["rankings", "kudosu"]);
            return response.ranking; // It's the only property
        }
        Kudosu.getRanking = getRanking;
    })(Kudosu = User.Kudosu || (User.Kudosu = {}));
    /**
     * Get the top players of the game, with some filters!
     * @param ruleset Self-explanatory, is also known as "Gamemode"
     * @param type Rank players by their performance points or by their ranked score?
     * @param config Specify which page, country, filter out non-friends...
     */
    async function getRanking(ruleset, type, config) {
        return await this.request("get", ["rankings", Ruleset[ruleset], type], { ...config });
    }
    User.getRanking = getRanking;
    /**
     * Get extensive user data about the authorized user
     * @scope {@link Scope"identify"}
     * @param ruleset The data should be relevant to which ruleset? (defaults to **user's default Ruleset**)
     */
    async function getResourceOwner(ruleset) {
        return await this.request("get", ["me"], { mode: ruleset });
    }
    User.getResourceOwner = getResourceOwner;
    /**
     * Get extensive user data about whoever you want!
     * @param user A user id, a username or a `User` object!
     * @param ruleset The data should be relevant to which ruleset? (defaults to **user's default Ruleset**)
     */
    async function getOne(user, ruleset) {
        const mode = ruleset !== undefined ? Ruleset[ruleset] : "";
        if (typeof user === "string") {
            user = "@" + user;
        } // `user` is the username, so use the @ prefix
        if (typeof user === "object") {
            user = user.id;
        }
        return await this.request("get", ["users", user, mode]);
    }
    User.getOne = getOne;
    /**
     * Lookup user data for up to 50 users at once!
     * @param users An array containing user ids or/and `User` objects!
     */
    async function lookupMultiple(users) {
        const ids = users.map((user) => typeof user === "number" ? user : user.id);
        const response = await this.request("get", ["users", "lookup"], { ids });
        return response.users; // It's the only property
    }
    User.lookupMultiple = lookupMultiple;
    /**
     * Get user data for up to 50 users at once!
     * @param users An array containing user ids or/and `User` objects!
     * @param include_variant_statistics Should the response include `variants`, useful to get stats specific to mania 4k/7k for example? (defaults to **false**)
     */
    async function getMultiple(users, include_variant_statistics = false) {
        const ids = users.map((user) => typeof user === "number" ? user : user.id);
        const response = await this.request("get", ["users"], { ids, include_variant_statistics });
        return response.users; // It's the only property
    }
    User.getMultiple = getMultiple;
    /**
     * Get "notable" scores from a user
     * @param user The user who set the scores
     * @param type Do you want scores: in the user's top 100, that are top 1 on a beatmap, that have been recently set?
     * @param ruleset The Ruleset the scores were made in (defaults to **user's default Ruleset**)
     * @param include Do you also want lazer scores and failed scores? (defaults to **true for lazer** & **false for fails**)
     * @param config Array limit & offset
     */
    async function getScores(user, type, ruleset, include = { lazer: true, fails: false }, config) {
        const user_id = typeof user === "number" ? user : user.id;
        const mode = ruleset !== undefined ? Ruleset[ruleset] : undefined;
        return await this.request("get", ["users", user_id, "scores", type], { mode, ...config, legacy_only: Number(!include.lazer), include_fails: String(Number(include.fails)) });
    }
    User.getScores = getScores;
    /**
     * Get beatmaps favourited or made by a user!
     * @param user The user in question
     * @param type The relation between the user and the beatmaps
     * @param config Array limit & offset
     */
    async function getBeatmaps(user, type, config) {
        const user_id = typeof user === "number" ? user : user.id;
        return await this.request("get", ["users", user_id, "beatmapsets", type], { ...config });
    }
    User.getBeatmaps = getBeatmaps;
    /**
     * Get the beatmaps most played by a user!
     * @param user The user who played the beatmaps
     * @param config Array limit & offset
     */
    async function getMostPlayed(user, config) {
        const user_id = typeof user === "number" ? user : user.id;
        return await this.request("get", ["users", user_id, "beatmapsets", "most_played"], { ...config });
    }
    User.getMostPlayed = getMostPlayed;
    /**
     * Get an array of Events of different `type`s that relate to a user's activity during the last 31 days! (or 100 activities, whatever comes first)
     * @param user The user in question
     * @param config Array limit & offset
     */
    async function getRecentActivity(user, config) {
        const user_id = typeof user === "number" ? user : user.id;
        return await this.request("get", ["users", user_id, "recent_activity"], { ...config });
    }
    User.getRecentActivity = getRecentActivity;
    /**
     * Get user data of each friend of the authorized user
     * @scope {@link Scope"friends.read"}
     * @remarks The Statistics will be of the authorized user's favourite ruleset, not the friend's!
     */
    async function getFriends() {
        return await this.request("get", ["friends"]);
    }
    User.getFriends = getFriends;
})(User || (User = {}));
