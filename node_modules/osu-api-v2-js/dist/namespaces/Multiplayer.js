export var Multiplayer;
(function (Multiplayer) {
    let Room;
    (function (Room) {
        let PlaylistItem;
        (function (PlaylistItem) {
            /**
             * Get the scores on a specific item of a room!
             * @param item An object with the id of the item in question, as well as the id of the room
             * @param config How many scores, how are they sorted, is there a cursor_string?
             * @remarks This will **not work for rooms created before ~March 5th 2024** https://github.com/ppy/osu-web/issues/10725
             */
            async function getScores(item, config) {
                const limit = config?.limit ?? 50;
                const sort = config?.sort === "id_asc" ? "score_asc" : "score_desc";
                return await this.request("get", ["rooms", item.room_id, "playlist", item.id, "scores"], { limit, sort, cursor_string: config?.cursor_string });
            }
            PlaylistItem.getScores = getScores;
        })(PlaylistItem = Room.PlaylistItem || (Room.PlaylistItem = {}));
        let Leader;
        (function (Leader) {
            /**
             * Get the room stats of all the users of that room!
             * @param room The room or the id of the room in question
             * @returns An object with the leaderboard, and the score and position of the authorized user under `user_score`
             */
            async function getMultiple(room) {
                const room_id = typeof room === "number" ? room : room.id;
                return await this.request("get", ["rooms", room_id, "leaderboard"]);
            }
            Leader.getMultiple = getMultiple;
        })(Leader = Room.Leader || (Room.Leader = {}));
        let Event;
        (function (Event) {
            /**
             * Get all the events about a lazer **realtime** room!
             * @param room The room (or its id) where the events occurred
             * @remarks It **WILL error (422)** if the provided room is not realtime, and **may return empty arrays** on rooms from roughly April 2025 or older
             */
            async function getAll(room) {
                const room_id = typeof room === "number" ? room : room.id;
                return await this.request("get", ["rooms", room_id, "events"]);
            }
            Event.getAll = getAll;
        })(Event = Room.Event || (Room.Event = {}));
        /**
         * Get data about a lazer multiplayer room (realtime or playlists)!
         * @param room The room or the id of the room, can be found at the end of its URL (after `/multiplayer/rooms/`)
         */
        async function getOne(room) {
            const room_id = typeof room === "number" ? room : room.id;
            return await this.request("get", ["rooms", room_id]);
        }
        Room.getOne = getOne;
        /**
         * Get playlists/realtime rooms that are active, that have ended, that the user participated in, that the user made, or just simply any room!
         * @scope {@link Scope"public"}
         * @param type Whether the multiplayer rooms are in playlist format (like current spotlights) or realtime
         * @param mode The state of the room, or the relation of the authorized user with the room
         * @param limit The maximum amount of rooms to return, defaults to 10
         * @param sort Sort (where most recent is first) by creation date or end date, defaults to the creation date
         * @param season_id Only get rooms (playlists) that belong to a specific (modern) *Beatmap Spotlights* season **id**
         * (so `5`'d be summer 2020's mania rooms, not winter 2022!!)
         */
        async function getMultiple(type, mode, limit = 10, sort = "created", season_id) {
            return await this.request("get", ["rooms"], { type_group: type, mode, limit, sort, season_id });
        }
        Room.getMultiple = getMultiple;
    })(Room = Multiplayer.Room || (Multiplayer.Room = {}));
})(Multiplayer || (Multiplayer = {}));
