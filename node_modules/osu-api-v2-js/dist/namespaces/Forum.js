export var Forum;
(function (Forum) {
    let Post;
    (function (Post) {
        /**
         * Edit a ForumPost! Note that it can be the initial one of a ForumTopic!
         * @scope {@link Scope"forum.write"}
         * @param post The post or the id of the post in question
         * @param new_text The new content of the post (replaces the old content)
         * @returns The edited ForumPost
         */
        async function edit(post, new_text) {
            const post_id = typeof post === "number" ? post : post.id;
            return await this.request("put", ["forums", "posts", post_id], { body: new_text });
        }
        Post.edit = edit;
    })(Post = Forum.Post || (Forum.Post = {}));
    let Topic;
    (function (Topic) {
        /**
        * Get a Forum.Topic, as well as its main post (content) and the posts that were sent in it!
        * @param topic An object with the id of the topic in question
        * @param config How many results maximum, how to sort them, etc...
        * @remarks The oldest post of a topic is the text of a topic
        */
        async function getOne(topic, config) {
            const topic_id = typeof topic === "number" ? topic : topic.id;
            const start = config?.sort !== "id_desc" ? typeof config?.first_post === "object" ? config.first_post.id : config?.first_post : undefined;
            const end = config?.sort === "id_desc" ? typeof config.first_post === "object" ? config.first_post.id : config.first_post : undefined;
            return await this.request("get", ["forums", "topics", topic_id], { ...config, start, end });
        }
        Topic.getOne = getOne;
        /**
         * Get multiple existing Forum.Topic, optionally in a specific Forum!
         * @param config Specify the Forum of the Topics, sorting options, how many Topics maximum...
         * @returns An object with an array of relevant Forum.Topic, and a `cursor_string` to allow you to go further
         */
        async function getMultiple(config) {
            const sort = config?.sort === "id_asc" ? "old" : config?.sort === "id_desc" ? "new" : undefined;
            const forum_id = typeof config?.forum === "object" ? config.forum.id : config?.forum;
            return await this.request("get", ["forums", "topics"], { limit: config?.limit, cursor_string: config?.cursor_string, sort, forum_id });
        }
        Topic.getMultiple = getMultiple;
        /**
         * Create a new Forum.Topic in the forum of your choice!
         * @scope {@link Scope"forum.write"}
         * @param forum The Forum you're creating your topic in
         * @param title The topic's title
         * @param text The first post's content/message
         * @param poll If you want to make a poll, specify the parameters of that poll!
         * @returns An object with the topic you've made, and its first initial post (which uses your `text`)
         * @remarks Some users may not be allowed to do that, such as newly registered users, so this can 403 even with the right scopes
         */
        async function create(forum, title, text, poll) {
            const forum_id = typeof forum === "number" ? forum : forum.id;
            const with_poll = poll !== undefined;
            const options = poll?.options !== undefined ? poll.options.toString().replace(/,/g, "\n") : undefined;
            return await this.request("post", ["forums", "topics"], { forum_id, title, body: text, with_poll, forum_topic_poll: poll ? {
                    title: poll.title,
                    options: options,
                    length_days: poll.length_days,
                    max_options: poll.max_options || 1,
                    vote_change: poll.vote_change || false,
                    hide_results: poll.hide_results || false,
                } : undefined });
        }
        Topic.create = create;
        /**
         * Make and send a Forum.Post in a Forum.Topic!
         * @scope {@link Scope"forum.write"}
         * @param topic The topic or the id of the topic you're making your reply in
         * @param text Your reply! Your message!
         * @returns The reply you've made, as a Forum.Post!
         * @remarks Replying when the last post was made by the authorized user will likely cause the server to return a 403
         */
        async function reply(topic, text) {
            const topic_id = typeof topic === "number" ? topic : topic.id;
            return await this.request("post", ["forums", "topics", topic_id, "reply"], { body: text });
        }
        Topic.reply = reply;
        /**
         * Edit the title of a Forum.Topic!
         * @scope {@link Scope"forum.write"}
         * @param topic The topic or the id of the topic in question
         * @param new_title The new title of the topic
         * @returns The edited ForumTopic
         * @remarks Use `editForumPost` if you wanna edit the post at the top of the topic
         */
        async function editTitle(topic, new_title) {
            const topic_id = typeof topic === "number" ? topic : topic.id;
            return await this.request("put", ["forums", "topics", topic_id], { forum_topic: { topic_title: new_title } });
        }
        Topic.editTitle = editTitle;
    })(Topic = Forum.Topic || (Forum.Topic = {}));
    /**
     * Get a Forum with a specific id, as well as its Forum.Topics!
     * @param forum The Forum you want to get
     * @returns An object with the Forum, its topics, and the topics pinned in it
     */
    async function getOne(forum) {
        const forum_id = typeof forum === "number" ? forum : forum.id;
        return await this.request("get", ["forums", forum_id]);
    }
    Forum.getOne = getOne;
    /**
     * Get a list of all top-level Forums!
     * @returns All the top-level forums
     * @remarks The subforums of a forum are in the properties of their respective forum
     */
    async function getMultiple() {
        const response = await this.request("get", ["forums"]);
        return response.forums; // It's the only property
    }
    Forum.getMultiple = getMultiple;
})(Forum || (Forum = {}));
