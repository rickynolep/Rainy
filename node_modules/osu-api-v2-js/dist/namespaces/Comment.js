/**
 * Remove so-called "Deleted Items" / items that lack an id, add a "deleted_commentable_meta" and make it the number of removed objects
 * @remarks https://github.com/ppy/osu-web/issues/11077
 */
function removeDeletedItems(bundle) {
    const commentable_meta = bundle.commentable_meta.filter((c) => c.id);
    bundle.deleted_commentable_meta = bundle.commentable_meta.length - commentable_meta.length;
    bundle.commentable_meta = commentable_meta;
    return bundle;
}
export var Comment;
(function (Comment) {
    /**
     * Get a specific comment by using its id!
     * @param comment The comment in question
     */
    async function getOne(comment) {
        const comment_id = typeof comment === "number" ? comment : comment.id;
        return removeDeletedItems(await this.request("get", ["comments", comment_id]));
    }
    Comment.getOne = getOne;
    /**
     * Get comments that meet any of your requirements!
     * @param from From where are the comments coming from? Maybe a beatmapset, but then, which beatmapset?
     * @param parent The comments are replying to which comment? Make the id 0 to filter out replies (and only get top level comments)
     * @param sort Should the comments be sorted by votes? Should they be from after a certain date? Maybe you can give a cursor?
     */
    async function getMultiple(from, parent, sort) {
        const after = typeof sort?.after === "object" ? sort.after.id : sort?.after;
        const parent_id = typeof parent === "number" ? parent : parent?.id;
        return removeDeletedItems(await this.request("get", ["comments"], {
            after, commentable_type: from?.type, commentable_id: from?.id,
            cursor: sort?.cursor, parent_id, sort: sort?.type
        }));
    }
    Comment.getMultiple = getMultiple;
})(Comment || (Comment = {}));
