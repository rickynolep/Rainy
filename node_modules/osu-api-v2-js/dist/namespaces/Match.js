export var Match;
(function (Match) {
    /**
     * Get data of a multiplayer lobby from the stable (non-lazer) client that have URLs with `community/matches` or `mp`
     * @param match The id of a match can be found at the end of its URL
     * @param query Filter and limit the amount of events shown
     */
    async function getOne(match, query) {
        const match_id = typeof match === "number" ? match : match.id;
        const before = typeof query?.before === "object" ? query.before.id : query?.before;
        const after = typeof query?.after === "object" ? query.after.id : query?.after;
        return await this.request("get", ["matches", match_id], { before, after, limit: query?.limit });
    }
    Match.getOne = getOne;
    /**
     * Get the info about several matches!
     * @param config The id of the first match of the array, and the sorting and size of said array
     */
    async function getMultiple(config) {
        // `first_match_in_array` is a cool way to use the endpoint's cursor
        const match_id = typeof config?.first_match_in_array === "object" ? config?.first_match_in_array.id : config?.first_match_in_array;
        const cursor = match_id ? { match_id: match_id + (config?.sort === "id_asc" ? -1 : 1) } : undefined;
        const response = await this.request("get", ["matches"], { cursor, limit: config?.limit, sort: config?.sort });
        return response.matches; // NOT the only property; `params` is useless while `cursor` and `cursor_string` are superseded by `first_match_in_array`
    }
    Match.getMultiple = getMultiple;
})(Match || (Match = {}));
