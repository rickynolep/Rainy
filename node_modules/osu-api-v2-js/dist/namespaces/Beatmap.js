import { Ruleset } from "../index.js";
export var Beatmap;
(function (Beatmap) {
    let UserTag;
    (function (UserTag) {
        /**
         * Get all the UserTags that currently exist in the game!
         * @returns An Array of UserTags
         */
        async function getAll() {
            const response = await this.request("get", ["tags"]);
            return response.tags; // It's the only property
        }
        UserTag.getAll = getAll;
    })(UserTag = Beatmap.UserTag || (Beatmap.UserTag = {}));
    let Pack;
    (function (Pack) {
        /**
         * Get data about a Beatmap.Pack using its tag!
         * @param pack The Pack or the pack tag of the Pack you're trying to get
         * @param legacy_only Should lazer scores be excluded from the pack's `user_completion_data`? (defaults to **false**)
         * @remarks Currently in https://osu.ppy.sh/beatmaps/packs, when hovering a pack, its URL with its tag should be preview by your browser
         */
        async function getOne(pack, legacy_only = false) {
            const tag = typeof pack === "string" ? pack : pack.tag;
            return await this.request("get", ["beatmaps", "packs", tag], { legacy_only: Number(legacy_only) });
        }
        Pack.getOne = getOne;
        /**
         * Get an Array of up to 100 Beatmap.Packs of a specific type!
         * @param type The type of the BeatmapPacks (defaults to **standard**)
         * @param cursor_string Use a response's `cursor_string` with the same parameters to get the next "page" of results!
         */
        async function getMultiple(type = "standard", cursor_string) {
            return await this.request("get", ["beatmaps", "packs"], { type, cursor_string });
        }
        Pack.getMultiple = getMultiple;
    })(Pack = Beatmap.Pack || (Beatmap.Pack = {}));
    let DifficultyAttributes;
    (function (DifficultyAttributes) {
        /**
         * Get various data about the difficulty of a beatmap!
         * @param beatmap The Beatmap in question
         * @param mods Can be a bitset of mods, an array of mod acronyms, or an array of Mods (ignores mod settings) (defaults to **No Mod**)
         * @param ruleset Useful to specify if the beatmap is a convert (defaults to **the ruleset the beatmap was intended for**)
         * @remarks You may want to use api.getBeatmapDifficultyAttributesOsu (or Taiko or whatever) instead for better type safety
         */
        async function get(beatmap, mods, ruleset) {
            beatmap = typeof beatmap === "number" ? beatmap : beatmap.id;
            const response = await this.request("post", ["beatmaps", beatmap, "attributes"], { ruleset_id: ruleset, mods });
            return response.attributes; // It's the only property
        }
        DifficultyAttributes.get = get;
        /**
         * Get various data about the difficulty of an osu! beatmap!
         * @param beatmap The Beatmap in question
         * @param mods Can be a bitset of mods, an array of mod acronyms, or an array of Mods (ignores mod settings) (defaults to **No Mod**)
         */
        async function getOsu(beatmap, mods) {
            return await this.getBeatmapDifficultyAttributes(beatmap, mods, Ruleset.osu);
        }
        DifficultyAttributes.getOsu = getOsu;
        /**
         * Get various data about the difficulty of a taiko beatmap!
         * @param beatmap The Beatmap in question
         * @param mods Can be a bitset of mods, an array of mod acronyms, or an array of Mods (ignores mod settings) (defaults to **No Mod**)
         */
        async function getTaiko(beatmap, mods) {
            return await this.getBeatmapDifficultyAttributes(beatmap, mods, Ruleset.taiko);
        }
        DifficultyAttributes.getTaiko = getTaiko;
        /**
         * Get various data about the difficulty of a ctb beatmap!
         * @param beatmap The Beatmap in question
         * @param mods Can be a bitset of mods, an array of mod acronyms, or an array of Mods (ignores mod settings) (defaults to **No Mod**)
         * @remarks Since the pp update of 2025-03-06, no property exclusive to this Ruleset exists
         */
        async function getFruits(beatmap, mods) {
            return await this.getBeatmapDifficultyAttributes(beatmap, mods, Ruleset.fruits);
        }
        DifficultyAttributes.getFruits = getFruits;
        /**
         * Get various data about the difficulty of a mania beatmap!
         * @param beatmap The Beatmap in question
         * @param mods Can be a bitset of mods, an array of mod acronyms, or an array of Mods (ignores mod settings) (defaults to **No Mod**)
         * @remarks Since the pp update of 2025-03-06, no property exclusive to this Ruleset exists
         */
        async function getMania(beatmap, mods) {
            return await this.getBeatmapDifficultyAttributes(beatmap, mods, Ruleset.mania);
        }
        DifficultyAttributes.getMania = getMania;
    })(DifficultyAttributes = Beatmap.DifficultyAttributes || (Beatmap.DifficultyAttributes = {}));
    /**
     * Get the score on a beatmap made by a specific user (with specific mods and on a specific ruleset if needed)
     * @param beatmap The Beatmap the score was made on
     * @param user The User who made the score
     * @param config Specify the score's ruleset, the score's mods, prevent a lazer score from being returned
     * @returns An Object with the position of the score according to the specified Mods and Ruleset, and with the score itself
     */
    async function getUserScore(beatmap, user, config) {
        const mode = config?.ruleset !== undefined ? Ruleset[config.ruleset] : undefined;
        delete config?.ruleset;
        beatmap = typeof beatmap === "number" ? beatmap : beatmap.id;
        user = typeof user === "number" ? user : user.id;
        return await this.request("get", ["beatmaps", beatmap, "scores", "users", user], { ...config, mode });
    }
    Beatmap.getUserScore = getUserScore;
    /**
     * Get the scores on a beatmap made by a specific user (with the possibility to specify if the scores are on a convert)
     * @param beatmap The Beatmap the scores were made on
     * @param user The User who made the scores
     * @param config Specify the score's ruleset, prevent a lazer score from being returned**
     */
    async function getUserScores(beatmap, user, config) {
        const ruleset = config?.ruleset !== undefined ? Ruleset[config.ruleset] : undefined;
        delete config?.ruleset;
        beatmap = typeof beatmap === "number" ? beatmap : beatmap.id;
        user = typeof user === "number" ? user : user.id;
        const response = await this.request("get", ["beatmaps", beatmap, "scores", "users", user, "all"], { ...config, ruleset });
        return response.scores; // It's the only property
    }
    Beatmap.getUserScores = getUserScores;
    /**
     * Get extensive beatmap data about whichever beatmap you want!
     * @param query What to specify in order to find the right beatmap
    */
    async function lookup(query) {
        const id = query.id ? String(query.id) : undefined;
        return await this.request("get", ["beatmaps", "lookup"], { ...query, id });
    }
    Beatmap.lookup = lookup;
    /**
     * Get extensive beatmap data about whichever beatmap you want!
     * @param beatmap The beatmap or the id of the beatmap you're trying to get
     */
    async function getOne(beatmap) {
        beatmap = typeof beatmap === "number" ? beatmap : beatmap.id;
        return await this.request("get", ["beatmaps", beatmap]);
    }
    Beatmap.getOne = getOne;
    /**
     * Get extensive beatmap data for up to 50 beatmaps at once!
     * @param beatmaps An array of beatmaps or of objects that have the id of the beatmaps you're trying to get
     */
    async function getMultiple(beatmaps) {
        const ids = beatmaps.map((beatmap) => typeof beatmap === "number" ? beatmap : beatmap.id);
        const response = await this.request("get", ["beatmaps"], { ids });
        return response.beatmaps; // It's the only property
    }
    Beatmap.getMultiple = getMultiple;
    /**
     * Get the top scores of a beatmap!
     * @param beatmap The Beatmap in question
     * @param config Specify the score's ruleset, mods, type, prevent a lazer score from being returned
     * @remarks Please check if `mods` and `type` seem to be supported or not by the API: https://osu.ppy.sh/docs/index.html#get-beatmap-scores
     */
    async function getScores(beatmap, config) {
        const mode = config?.ruleset !== undefined ? Ruleset[config.ruleset] : undefined;
        delete config?.ruleset;
        beatmap = typeof beatmap === "number" ? beatmap : beatmap.id;
        const response = await this.request("get", ["beatmaps", beatmap, "scores"], { ...config, mode });
        return response.scores; // It's the only property
    }
    Beatmap.getScores = getScores;
})(Beatmap || (Beatmap = {}));
